import pandas as pd
from typing import List, Callable, Optional

from dataflow.utils.registry import OPERATOR_REGISTRY
from dataflow import get_logger
from dataflow.utils.storage import DataFlowStorage
from dataflow.core import OperatorABC

@OPERATOR_REGISTRY.register()
class AutogenFilter(OperatorABC):
    """
    AutogenFilter is an operator for detecting and filtering auto-generated code.
    It identifies auto-generated code files by checking code header markers and optional external detection functions.
    """

    # Common markers for auto-generated code
    AUTOGEN_PATTERNS = [
        "auto-generated", "autogenerated", "automatically generated",
        "generated automatically", "this file is generated"
    ]

    def __init__(self):
        """
        Initialize the operator and set up the logger.
        """
        self.logger = get_logger()

    @staticmethod
    def get_desc(lang: str = "en"):
        """
        Provide operator functionality description and parameter documentation.
        """
        if lang == "zh":
            return (
                "该算子用于检测和过滤自动生成的代码文件。\n\n"
                "检测方法：\n"
                "- 支持外部自动生成检测函数\n"
                "- 检查文件头部是否包含自动生成标记\n\n"
                "输入参数：\n"
                "- input_lines_key: 代码行列表的字段名 (默认: 'lines')\n"
                "- output_pass_key: 输出过滤结果的字段名 (默认: 'autogen_filter_pass')\n"
                "- is_generated_func: 可选的外部检测函数\n"
            )
        return (
            "This operator detects and filters auto-generated code files.\n\n"
            "Detection methods:\n"
            "- Support for external generation detection function\n"
            "- Check file header for auto-generation markers\n\n"
            "Input Parameters:\n"
            "- input_lines_key: Field name containing code lines (default: 'lines')\n"
            "- output_pass_key: Field name for filter results (default: 'autogen_filter_pass')\n"
            "- is_generated_func: Optional external detection function\n"
        )

    def _validate_dataframe(self, dataframe: pd.DataFrame):
        """
        Validate DataFrame to ensure required columns exist.
        """
        required_keys = [self.input_lines_key]
        missing = [k for k in required_keys if k not in dataframe.columns]

        if missing:
            raise ValueError(f"AutogenFilter missing required columns: {missing}")

    def run(
        self,
        storage: DataFlowStorage,
        input_lines_key: str = "lines",
        output_pass_key: str = "autogen_filter_pass",
        is_generated_func: Optional[Callable[[], bool]] = None
    ) -> List[str]:
        """
        Execute auto-generated code detection and filtering.

        Args:
            storage: Data storage object
            input_lines_key: Field name containing code lines
            output_pass_key: Field name for filter results
            is_generated_func: Optional external detection function

        Returns:
            List[str]: List containing new output column names
        """
        self.logger.info("Running AutogenFilter operator...")

        # Store key name for use by helper methods
        self.input_lines_key = input_lines_key

        # 1. Read data
        dataframe = storage.read("dataframe")
        if dataframe.empty:
            self.logger.warning("Input data is empty, skipping processing.")
            storage.write(dataframe)
            return [output_pass_key]

        original_count = len(dataframe)

        # 2. Validate data
        self._validate_dataframe(dataframe)

        # 3. Define filter function
        def autogen_filter(lines: List[str]) -> bool:
            """Check if code is auto-generated"""
            if is_generated_func and is_generated_func():
                return False
            first_5 = "\n".join(lines[:5]).lower()
            for pat in self.AUTOGEN_PATTERNS:
                if pat in first_5:
                    return False
            return True

        # 4. Apply filter
        self.logger.info("Checking for auto-generated code markers...")
        dataframe[output_pass_key] = dataframe[input_lines_key].apply(autogen_filter)

        # 5. Count results
        passed_count = dataframe[output_pass_key].sum()
        self.logger.info(f"Filtering completed. {passed_count}/{original_count} samples passed the check.")

        # 6. Write back results
        output_file = storage.write(dataframe)
        self.logger.success(f"AutogenFilter completed. Results saved to {output_file}")

        return [output_pass_key]